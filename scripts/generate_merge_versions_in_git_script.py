#!/usr/bin/python
import argparse
import os
import itertools

parser = argparse.ArgumentParser(description='produce a bahs scrupt which reduce multiple version of same file into git commits')
parser.add_argument('path', help='path to the folder to search for multiple-version files')
parser.add_argument('--to_file', help='filename to ouput the bash script into')
args = parser.parse_args()

directory=args.path

if not os.path.exists(directory):
	print "path argument provided doesn't exists ! Please provide an existing directory"
	exit(1)


absolute_path=os.getcwd()
script_bash=""
for (dirpath,dirnames,filenames) in os.walk(directory):

	filenames=[f for f in filenames if "_v" in f] 
	if len(filenames)>0:
		target_directory=dirpath
		versions=[(f.split(".")[0].split("_v")[-1],f,f.split(".")[0].split("_v")[0]) for f in filenames]
		versions.sort(key=lambda t:t[2])
		script_bash+="""cd "%s";\n"""%os.path.join(absolute_path,target_directory)
		#print versions
		for file, versions in itertools.groupby(versions,lambda t:t[2]) :
			
			versions=list(versions)
			versions.sort(key=lambda t:int(t[0]))

			for v,filename,new_filename in versions :
				
				script_bash+="cp %s %s.csv;\n"%(filename,new_filename)
				script_bash+="git rm %s;\n"%filename
				script_bash+="git add %s.csv\n"%new_filename
				script_bash+="""git commit %s.csv -m "version %s for %s - commit generated by %s" ;\n"""%(new_filename,v,new_filename,args.to_file if args.to_file else os.path.basename(__file__))
				if int(v)>=20:
					script_bash+="""echo "%s.csv" >> %s\n"""%(os.path.join(target_directory,new_filename),os.path.join(absolute_path,directory,"v20_files.txt"))

if args.to_file:
	with open(args.to_file,"w") as f:
		f.write(script_bash)
else:
	print script_bash
