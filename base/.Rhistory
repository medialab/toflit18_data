in_between <- vec_rnorm_1[(vec_rnorm_1>-1&vec_rnorm_1<(-0.5))]
in_between
mean(in_between)
var(in_between)
length(smaller)
length(larger)
length(in_between)
n <- 1000     # Number of observations
N <- 1000
n
N
n+N
n*N
mat_1 <- matrix(seq(1,8),ncol=2, byrow=TRUE)
mat_2 <- matrix(seq(1,8),ncol=4)
mat_1
mat_2
mat_1[1,]
mat_2[,1]
mat_2[,3]
mat_2[,]
mat_2[1,4]
mat_2[2,]
mat_1[,1]
mat_1
mat_1[mat_1[,1]<5,]
mat_1[,1]<5
mat_1[mat_1[,2]<5 & mat_1[,2]>3,] #attention, "3" est sur la 1er colomne, c'est normal qu'il apparaisse
mat_1%*%mat_2
det(mat_1%*%mat_2)
dim(mat_1)
dim(mat_2)
y1 <- rnorm(100)
x1 <- rnorm(100)
y2 <- rnorm(100)
x2 <- rnorm(100)
x1
y2
model_1  <- lm(y1~x1)$coefficients
model_2  <- lm(y2~x2)$coefficients
model_1
model_2
model_1  <- lm(y1~x1)$coefficients
model_2  <- lm(y2~x2)
model_1
model_2
model_1  <- lm(y1~x1)$coefficients
model_2  <- lm(y2~x2)$call
model_1
model_2
model_1  <- lm(y1~x1)$coefficients
model_2  <- lm(y2~x2)$coefficients    # We could also extract only "call" for example, instead of coefficients
model_1
model_2
model <- list(model_1,model_2)
model
model <- list(model_1,model_2,5)
model
model <- list(model_1,model_2)
model
?do.call
do.call(5)
?rbind
rbind(mat_2)
model <- do.call(rbind,model)
model <- as.data.frame(model)
model
rbind
model <- do.call(rbind,model)
model <- as.data.frame(model)
model
model
model <- do.call(rbind,model)
model
model <- list(model_1,model_2)
model
model <- do.call(rbind,model)
model
model <- as.data.frame(model)
model
model_1  <- lm(y1~x1)$coefficients
model_2  <- lm(y2~x2)$coefficients    # We could also extract only "call" for example, instead of coefficients
model_1
model_2
model <- list(model_1,model_2)
model
# Question 5 #
model <- do.call(rbind,model)
model <- as.data.frame(model)
model
model
names(model) <- c("alpha","beta")
model
y1 <- rnorm(100)
x1 <- rnorm(100)
x1
gen <- sample(c("F","M"),100,replace=TRUE)
gen
sample?
?sample
?sampe
?sample
gen <- sample(c("F","M"),100,replace=FALSE)
gen
gen <- sample(c("F","M"),100,replace=TRUE)
gen
data <- data.frame(y1=y1,x1=x1,gen=gen,stringsAsFactors=FALSE)
data
data <- data.frame(y1=y1,x1=x1,gen=gen,stringsAsFactors=TRUE)
data
data <- data.frame(y1=y1,x1=x1,gen=gen,stringsAsFactors=FALSE)
data
names(data) <- c("lol","xD","ptdr")
data
data <- data.frame(y1=y1,x1=x1,gen=gen,stringsAsFactors=FALSE)
data
dim(data)
names(data)
data_1 <- data[data$gen=="F",]
data_1
data
data_2  <- data[data$gen=="M"&data$x1>0&data$y1<0,]
data_2
c(mean(data$x1),mean(data$y1))
c(mean(data_1$x1),mean(data_1$y1))
c(mean(data_2$x1),mean(data_2$y1))
data_1$x1
data_1[,2]
Trade<-read.table(file=file.choose(),header=T,dec=".")
attach(Trade)
head(Trade)
n <- 1000     # Number of observations
N <- 1000     # Number of simulations
R_squared <- rep(0,1000) # why ?
RSS <- rep(0,1000)
for (t in 1:N)
{
x <- runif(n,0,6)
e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
R_squared[t]
t
RSS[t]
RSS[500]
RSS[250]
R_squared
RSS
?histogram
?hits
?hist
hist(R_squared)
hist(RSS)
?function
?function
?function
save(myfunction, file=myfunction.Rdata)
save("myfunction", file="myfunction.Rdata")
myfunction <- function(a,b) {
a+b
output <-
}
myfunction <- function(a,b) {
a+b
}
myfunction(2,3)
myfunction <- function(a,b) {
output <- a+b
return <- output
}
myfunction(2,3)
myfunction(2,3)
myfunction <- function(a,b) {
output <- a+b
return <- output
}
myfunction(2,3)
myfunction <- function(a,b) {
output <- a+b
return(output)
}
myfunction(2,3)
function_sum<-function(x,y){
stopifnot(length(x)==1&length(y)==1)
x+y
} function_sum(1,1)
function_sum<-function(x,y){
stopifnot(length(x)==1&length(y)==1)
x+y
}
function_sum(1,1)
function_sum<-function(x,y){
stopifnot(length(x)==1&length(y)==1)
x+y
}
function_sum(100,1)
function_sum(seq(1:10),1)
hist(R_squared)
hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
hist_R_squared <- hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
hist_RSS <- hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
hist_R_squared
hist_RSS
myfunction <- function(a,b) {
output <-((hist_R_squared),(hist_RSS))
return(output)
}
myfunction <- function(a,b) {
output <-((hist_R_squared)(hist_RSS))
return(output)
}
myfunction(2,3)
myfunction <- function(a,b) {
output <-(hist_R_squared)
return(output)
}
myfunction(2,3)
hist_R_squared
hist_R_squared
hist_R_squared
hist_R_squared
hist_R_squared
hist_RSS
}
hist_R_squared
myfunction <- function(a,b) {
output <-(hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared"))
return(output)
}
myfunction(2,3)
##### saving a function
myfunction(2,3)
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
output <-(hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared"))
return(output)
}
myfunction(200,1000,seq(1:200))
myfunction(1000,1000,seq(1:1000))
##### saving a function
myfunction(1000,1000,seq(1:1000))
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
output1 <-hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
output2 <- hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
return(output1,output2)
}
myfunction(1000,1000,seq(1:1000))
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
output1 <-hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
output2 <- hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
return(R_squared) # how to return multiple objects ?
}
?seq
seq(1:10,0.1)
seq(from=1, to=10, by=0.1)
seq(from=1, to=10, by=0.01)
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
output1 <-hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
output2 <- hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
return(R_squared) # how to return multiple objects ?
}
myfunction(1000,1000,rnorm(n,0,x^2))
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
return(R_squared) # how to return multiple objects ?
}
myfunction(1000,1000,rnorm(n,0,x^2))
R_squared
set.seed(123)
R_squared <- rep(0,1000) # why ?
RSS <- rep(0,1000)
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared    # Let's extract the R squared of each regression
RSS[t] <- sum(summary(model)$residuals^2)   # and the Residual Sum of Squares of each regression
}
R_squared
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
return(R_squared) # how to return multiple objects ?
}
myfunction(1000,1000,rnorm(n,0,x^2))
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
return(R_squared) # how to return multiple objects ?
return(RSS)
}
myfunction(1000,1000,rnorm(n,0,x^2))  # example 2 : using same parameters as in question 1
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
return(R_squared,RSS) # how to return multiple objects ?
}
myfunction(1000,1000,rnorm(n,0,x^2))  # example 2 : using same parameters as in question 1
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
# remove this line : e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
output1 <-hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
output2 <- hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
return(R_squared) # how to return multiple objects ?
}
myfunction(1000,1000,rnorm(n,0,x^2))  # example 2 : using same parameters as in question 1
hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
n <- 1000     # Number of observations
N <- 1000     # Number of simulations
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared    # Let's extract the R squared of each regression
RSS[t] <- sum(summary(model)$residuals^2)   # and the Residual Sum of Squares of each regression
}
R_squared
RSS
R_squared <- rep(0,1000) # First we assign arbitrary values to R squared and RSS, here let's consider them as a vector of zeros
RSS <- rep(0,1000)
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared    # Let's extract the R squared of each regression
RSS[t] <- sum(summary(model)$residuals^2)   # and the Residual Sum of Squares of each regression
}
R_squared
RSS
hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
myfunction <- function(n,N,e) {
for (t in 1:N)      # Let's create a loop that simulate 1000 times our previous model
{
x <- runif(n,0,6)
# this time we remove this line : e <- rnorm(n,0,x^2) , because we want the researcher to be able to choose values for e
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared
RSS[t] <- sum(summary(model)$residuals^2)
}
return(hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")) # how to return multiple objects ?
}
myfunction(1000,1000,rnorm(n,0,x^2))  # example 2 : using same parameters as in question 1
hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS")
hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared")
myfunction(1000,1000,rnorm(n,0,x^2))  # example 2 : using same parameters as in question 1
n <- 1000     # Number of observations
N <- 1000     # Number of simulations
R_squared <- rep(0,1000) # First we assign arbitrary values to R squared and RSS, here let's consider them as a vector of zeros
RSS <- rep(0,1000)
for (t in 1:N)      # Let's create a loop that simulate 1000 times our model
{
x <- runif(n,0,6)
e <- rnorm(n,0,x^2)
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared    # Let's extract the R squared of each regression
RSS[t] <- sum(summary(model)$residuals^2)   # and the Residual Sum of Squares of each regression
}
R_squared
RSS
# and know let's plot those two results in histograms :
par(mfrow=c(1,2))
hist(R_squared, main="Histogram of R Squared", ylab="frequency", xlab="R Squared values")
hist(RSS, main="Histogram of RSS", ylab="frequency", xlab="RSS values")
# Question 2 #
# Let's create a function :
myfunction <- function(n,N,sigma_squared, title1, title2, ...) {
par(mfrow=c(1,2)) #par command fix graphical parameters, for example "mfrow) which queries to print both graphs by column
stopifnot(length(sigma_squared)==n | length(sigma_squared)==1) # we can implement sanity check in our function
R_squared <- rep(0,1000)
RSS <- rep(0,1000)
for (t in 1:N)      # again, let's create a loop that simulate 1000 times our previous model
{
x <- runif(n,0,6)
e <- rnorm(n,0,sigma_squared) # because we want researcher to be able to set the variances of every e
y <- 1+2*x+e
model <- lm(y ~ x)
R_squared[t] <- summary(model)$r.squared    #same method as in question 1
RSS[t] <- sum(summary(model)$residuals^2)
}
hist(R_squared, main=title1, ...) #we can set titles, names for the axis.
hist(RSS, main=title2, ...)
}
c("salut","coucou")
savdata <- read.spss("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6A_Internal_Migration_of_household_Members.sav")
library(foreign)
savdata <- read.spss("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6A_Internal_Migration_of_household_Members.sav")
savdata <- read.spss("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6A_Internal_Migration_of_household_Members.sav")
savdata <- read.spss("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6B_International_Migration_of_household_Members.sav")
savdata <- read.spss("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6B_International_Migration_of_household_Members.sav", to.data.frame=TRUE)
savdata2 <- as.data.set(spss.system.file("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6B_International_Migration_of_household_Members.sav"))
install.packages("memisc")
library(memisc)
View(savdata)
savdata2 <- as.data.set(spss.system.file("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data jerome/lsms_2012_eng/LSMS 2012_eng/Data_LSMS 2012/Modul_6B_International_Migration_of_household_Members.sav"))
savdata2
data_oecd<-read.csv("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/data oecd/DIOC 2010-11Rev3/DIOC_2010_11_File_A_ter_REV.csv", sep=";", row.names=NULL)
View(data_oecd)
statadata <- read.dta("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/kenyan data/KEN_2009_MRHSS_v01_M_Stata8/Household.dta")
View(statadata)
statadata2 <- read.dta("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/south africa data/ZAF_2009_MRHSS_v01_M_Stata8/wbsasection 1-5 & 9.dta")
View(statadata2)
statadata3 <- read.dta("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/south africa data/ZAF_2009_MRHSS_v01_M_Stata8/wbsasection 6.dta")
View(statadata3)
stata <- cbind(statadata2,statadata3)
library(foreign)
library(memisc)
# Basic regression
# Loading data sets:
statadata2 <- read.dta("C:/Users/Quentin/Google Drive/FAC/Cours/Semestre 8/Applied Econonometrics/Paper/south africa data/ZAF_2009_MRHSS_v01_M_Stata8/wbsasection 1-5 & 9.dta")
View(statadata2)
summary(statadata3)
summary(statadata2)
rm(list=ls())
setwd("C:/Users/Quentin/Desktop/Stage/toflit18_data/base")
data1<-read.csv2("bdd_centrale.csv", sep=",", row.names=NULL)
View(data1)
sum(value)
base<-read.csv2("bdd_centrale.csv", sep=",", row.names=NULL)
rm(list=ls())
setwd("C:/Users/Quentin/Desktop/Stage/toflit18_data/base")
base<-read.csv2("bdd_centrale.csv", sep=",", row.names=NULL)
sum(base$value)
sumary(base$value)
summary(base$value)
View(base)
summary(base)
