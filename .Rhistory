library(sp)
library(sf)
library(rgdal)
library(gstat)
library(automap)
library(raster)
library(stringr)
library(spatialEco)
library(exactextractr)
library(ncdf4)
library(tidyverse)
library(ncdump)
library(sf)
library(lattice)
library(RColorBrewer)
library(parallel)
library(chirps)
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library(rdhs)
### Chargement de la carte du Snégal
Senegal <- ne_states(country = "Senegal", returnclass = "sp")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
library(sp)
library(sf)
library(rgdal)
library(gstat)
library(automap)
library(raster)
library(stringr)
library(spatialEco)
library(exactextractr)
library(ncdf4)
library(tidyverse)
library(ncdump)
library(sf)
library(lattice)
library(RColorBrewer)
library(parallel)
library(chirps)
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rnaturalearthhires")
library(rdhs)
rm(list = ls())
### On se connecte à ma session DHS
set_rdhs_config(email = "edouard.pignede@ird.fr",
project = "Senegal vulnerability to climate change")
### On selectionne le DHS chargé que l'on veut télécharger
### SN => Sénégal ; FL => Flat file :plus rapide ;HR => Household Recode ; KR => children's recode
datasets_HR <- dhs_datasets(countryIds = "SN",
surveyYear = "2019",
fileFormat = "FL",
fileType = "HR" )
datasets_KR <- dhs_datasets(countryIds = "SN",
surveyYear = "2019",
fileFormat = "FL",
fileType = "KR" )
datasets_IR <- dhs_datasets(countryIds = "SN",
surveyYear = "2019",
fileFormat = "FL",
fileType = "IR" )
### On le télécharge
downloads_HR <- get_datasets(datasets_HR$FileName)
downloads_KR <- get_datasets(datasets_KR$FileName)
downloads_IR <- get_datasets(datasets_IR$FileName)
### On le charge sur R
data_hous <- readRDS(downloads_HR$SNHR8AFL)
data_child <- readRDS(downloads_KR$SNKR8AFL)
data_women <- readRDS(downloads_IR$SNIR8AFL)
data_women$v106
library(dplyr)
library(plyr)
library(tidyverse)
library(stringr)
library(readr)
library(pracma)
library(IndexNumR)
library(hpiR)
library(tidyverse)
read_sav("C:/Users/pignede/menage_final.sav")
install.packages("haven")
read_sav("C:/Users/pignede/menage_final.sav")
devtools::install_github("tidyverse/haven")
devtools::install_github("tidyverse/haven")
library(haven)
install.packages("haven")
library(haven)
read_sav("C:/Users/pignede/menage_final.sav")
read_sav("C:/Users/pignede/Telechargements/menage_final.sav")
read_sav("C:/Users/pignede/Downloads/menage_final.sav")
as.data.frame(read_sav("C:/Users/pignede/Downloads/menage_final.sav"))
a <- read_sav("C:/Users/pignede/Downloads/menage_final.sav")
a$id_menage
a$region
a$departement
a$M10
a$M9
library(sp)
library(xlsx)
library(stringr)
library(dplyr)
str_to_upper("Thèse")
### On charge l'ensemble des données
Mots_cles <- read.xlsx2("./Data/Mots-clés.xlsx",
sheetIndex = 1)
getwd()
source('C:/Users/pignede/Desktop/Exported.R', echo=TRUE)
source('C:/Users/pignede/Desktop/Exported.R', echo=TRUE)
source('C:/Users/pignede/Desktop/Exported.R', echo=TRUE)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
### A définir: emplacement du working directory
setwd("C:/Users/pignede/Documents/GitHub/toflit18_data")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
library(dplyr)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
### Nettoyage de l'espace de travail
rm(list = ls())
### Nettoyage de l'espace de travail
rm(list = ls())
### A définir: emplacement du working directory
setwd("C:/Users/pignede/Documents/GitHub/toflit18_data")
source("./scripts/Edouard/Indice_global_scripts/Indice_global_filtre_ville.R")
Partner_index_global_calcul <- function()
{
### Création des lignes du csv
Index_pond <-  data.frame("Exports_imports" = factor(),
"Partner" = factor(),
"year" = integer(),
"Index_value" = numeric(),
"Part_value" = numeric(),
"Part_flux" = numeric())
### Ecriture des lignes du csv
write.csv2(Index_pond,
"./scripts/Edouard/Partner_index_results_global.csv",
row.names = F)
### Ajout au csv de la baseline et de la baseline + changement d'un paramètre pour chaque paramètre
### à l'aide de la fonction Add_new_parma défini ci-dessous
Add_new_partner_global()
Add_new_partner_global("Europe_et_Mediterranee")
Add_new_partner_global("Reste_du_monde")
}
Add_new_partner_global <- function(Partner = "All")
{
### Création des titres des lignes
Index_pond <-  data.frame("Exports_imports" = factor(),
"Partner" = factor(),
"year" = integer(),
"Index_value" = numeric(),
"Part_value" = numeric(),
"Part_flux" = numeric())
for (Type in c("Imports", "Exports")) {
### Calcul de l'index pour les paramètres choisis
Index <- Filter_calcul_index(Exports_imports = Type, ### On conserve les Importations ou les Exportations
Partner = Partner)
### A jout de l'index et des parts de flux et de valeur dans le commerce total, ainsi que la valeur des paramètres
### au dataframe
for (i in seq(1,dim(Index)[1])) {
Index_pond <- Index_pond %>%
add_row(Exports_imports = Type,
Partner = Partner,
year = Index$year[i],
Index_value = Index$Index[i],
Part_value = Index$Part_value[i],
Part_flux = Index$Part_flux[i])
}
}
### On charge les valeurs actuelles du csv
Index_res <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
### On ajoute le nouveau dataframe
Index_res <- rbind(Index_res, Index_pond)
### On retire les lignes si elles sont déja présentes dans le csv
### Par défaut, le nouveau résultat met à jour le précédent
Index_res <- Index_res[!duplicated(Index_res[ , 1:6], fromLast = T), ]
### On écrit le résulat dans le csv
write.csv2(Index_res,
"./scripts/Edouard/Partner_index_results_global.csv",
row.names = F)
}
Partner_index_global_calcul()
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Exports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Imports"))
summary(Reg_trend_partner_global)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Exports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Imports"))
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Imports"))
summary(Reg_trend_partner_global)
Index_partner <- read.csv2("./scripts/Edouard/Partner_index_results.csv", row.names = NULL)
Index_partner <- Index_partner %>%
mutate_if(is.character, as.factor) %>%
mutate(Partner = relevel(Partner, "All"),
Exports_imports = relevel(Exports_imports, "Imports")) %>%
filter(Ville != "Rennes")
plot(Index_partner$year, Index_partner$Index_value, type = "o")
Reg_trend_categ <- lm(log(Index_value) ~ year + Ville + Ville*year + Partner + Partner*year,
data = subset(Index_partner, Exports_imports == "Imports" & Partner != "All"))
summary(Reg_trend_categ)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Imports"))
summary(Reg_trend_partner_global)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Exports_imports = "Imports"
Product_sector = "All"
Partner = "Reste_du_monde"
### Filtrage de la base de données avec la fonction du scrip Filtrage.R
Data_filter <- Data_filtrage(Exports_imports = Exports_imports, Product_sector = Product_sector, Partner = Partner) ### On conserve les Importations ou les Exportations
### Calcul de l'indice avec la fonction Calcul_index
rt_index <- Calcul_index(Data_filter)
Correction_indice_Ag = T
### Lecture de la base de données courante et filtrage par la ville et le type (Imports ou Exports)
### Conservation uniquement des variables suivantes : "year", "customs_region", "export_import", "partner_orthographic",
### "product_simplification", "quantity_unit_metric", "quantities_metric", "unit_price_metric", "value", "best_guess_region_prodxpart"
### Création d'un indice de transaction et d'un indice de produit
### Conservation uniquement des produits dans la meilleure unité considérée (unité la plus vendue en terme de transctions)
### Calcul également de la valeur totale du commerce et du flux initiale
Res <- Read_bdd_courante(Exports_imports, Correction_indice_Ag, Product_sector, Partner)
### Data est la base de données filtrée sans les paramètres complémentaires
Data <- Res[[1]]
### Value_com_tot correspond aux valeurs de la valeur totale du flux et du commerce par année
Value_com_tot <- Res[[2]]
### On importe la base de données courante
bdd_courante <- read.csv(unz("./base/bdd courante.csv.zip", "bdd courante.csv") , encoding = "UTF-8")
### Filtrage initial de la base de données
Data <- bdd_courante %>%
select(c("year", "customs_region", "export_import", "partner_orthographic",
"product_simplification", "quantity_unit_metric", "quantities_metric",
"unit_price_metric", "value", "best_guess_region_prodxpart", "product_threesectors",
"product_threesectorsM", "partner_grouping")) %>%
mutate(Date = as.Date(as.character(year), format = "%Y")) %>%
### On selectionne uniquement les produits rangés par régions
filter(best_guess_region_prodxpart == 1, year >= 1718) %>%
### On crée une nouvelle variable produit issue du produit + ville
mutate(product_simplification_ville = paste(product_simplification, "/", customs_region)) %>%
### Les chaînes de charatères sont transformés en type facteur
mutate_if(is.character, as.factor) %>%
### Si aucun prix n'est affiché, on le complète par valeur /quantité
mutate(unit_price_metric = coalesce(unit_price_metric, value / quantities_metric)) %>%
### Création ID product_simplification et ID transaction
mutate(id_prod_simp = as.numeric(product_simplification_ville),
id_trans = row_number()) %>%
### On enlève les transactions sans prix et les transactions avec un prix nul
mutate(unit_price_metric = na_if(unit_price_metric, 0),
quantities_metric = na_if(quantities_metric, 0)) %>%
drop_na() %>%
### On crée une dummy variable best_unit_metric qui pour chaque transaction vaut 1
### si la transacton est dans l'unité métrique la plus utilisée pour le produit
group_by(product_simplification_ville) %>%
mutate(best_unit_metric = names(which.max(table(quantity_unit_metric)))) %>%
ungroup() %>%
as.data.frame() %>%
mutate(best_unit_metric = best_unit_metric == quantity_unit_metric )
### Correction indice Ag
if (Correction_indice_Ag) {
### Chargement de la base de données de la valeur de l'argent
Ag_value <- read.csv2("./scripts/Edouard/Silver_price/Silver_equivalent_of_the_lt_and_franc_(Hoffman).csv")
### On fusionne les deux bases de données
bdd_courante <- merge(bdd_courante, Ag_value, "year" = "year", all.x = T)
### On corrige les valeurs des prix
bdd_courante <- bdd_courante %>%
mutate(value = value * Value_of_livre) %>%
select(-c("Value_of_livre"))
}
### Calcule de la valeur totale du flux et du commerce initiale
Value_com_tot <- bdd_courante %>%
filter(best_guess_region_prodxpart == 1, year >= 1718) %>%
filter(export_import == Exports_imports) %>%
group_by(year) %>%
summarize(Value_tot = sum(value, na.rm = T),
Flux_tot = n()) %>%
as.data.frame()
### Calcule la valeur totale du commerce au niveau national
Value_com_tot_nat <- bdd_courante %>%
filter(best_guess_national_partner == 1, year >= 1718) %>%
filter(export_import == Exports_imports) %>%
group_by(year) %>%
summarize(Value_tot_national = sum(value, na.rm = T)) %>%
as.data.frame()
Value_com_tot <- merge(Value_com_tot, Value_com_tot_nat, "year" = "year", all.x = T)
### Correction indice Ag
if (Correction_indice_Ag) {
### Chargement de la base de données de la valeur de l'argent
Ag_value <- read.csv2("./scripts/Edouard/Silver_price/Silver_equivalent_of_the_lt_and_franc_(Hoffman).csv")
### On fusionne les deux bases de données
Data <- merge(Data, Ag_value, "year" = "year", all.x = T)
### On corrige les valeurs des prix
Data <- Data %>%
mutate(unit_price_metric = unit_price_metric * Value_of_livre,
value = value * Value_of_livre) %>%
select(-c("Value_of_livre"))
}
if(Product_sector != "All") {
Data <- Data %>%
filter(product_threesectors == Product_sector)
}
if (Partner == "Europe_et_Mediterranee") {
Data <- Data %>%
filter(partner_grouping %in% c("Allemagne", "Angleterre", "Espagne",
"Flandre et autres états de l'Empereur",
"Hollande", "France", "Italie", "Levant et Barbarie",
"Nord", "Portugal", "Suisse"))
}
if (Partner == "Reste_du_monde") {
Data <- Data %>%
filter(partner_grouping %in% c("Afrique", "Amériques", "Asie", "Etats-Unis d'Amérique",
"Monde", "Outre-mers"))
}
### On conserve uniquement les données dans la meilleure unité
Data <- Data %>%
filter(best_unit_metric == T
& export_import == Exports_imports) %>%
select(-c("best_unit_metric", "best_guess_region_prodxpart", "product_simplification",
"product_threesectors", "product_threesectorsM", "partner_grouping"))
View(Data)
### Lecture de la base de donnée courante. Conservation Exports ou Imports d'une ville
Read_bdd_courante <- function(Exports_imports, Correction_indice_Ag, Product_sector, Partner) {
### On importe la base de données courante
bdd_courante <- read.csv(unz("./base/bdd courante.csv.zip", "bdd courante.csv") , encoding = "UTF-8")
### Filtrage initial de la base de données
Data <- bdd_courante %>%
select(c("year", "customs_region", "export_import", "partner_orthographic",
"product_simplification", "quantity_unit_metric", "quantities_metric",
"unit_price_metric", "value", "best_guess_region_prodxpart", "product_threesectors",
"product_threesectorsM", "partner_grouping")) %>%
mutate(Date = as.Date(as.character(year), format = "%Y")) %>%
### On selectionne uniquement les produits rangés par régions
filter(best_guess_region_prodxpart == 1, year >= 1718) %>%
### On crée une nouvelle variable produit issue du produit + ville
mutate(product_simplification_ville = paste(product_simplification, "/", customs_region)) %>%
### Les chaînes de charatères sont transformés en type facteur
mutate_if(is.character, as.factor) %>%
### Si aucun prix n'est affiché, on le complète par valeur /quantité
mutate(unit_price_metric = coalesce(unit_price_metric, value / quantities_metric)) %>%
### Création ID product_simplification et ID transaction
mutate(id_prod_simp = as.numeric(product_simplification_ville),
id_trans = row_number()) %>%
### On enlève les transactions sans prix et les transactions avec un prix nul
mutate(unit_price_metric = na_if(unit_price_metric, 0),
quantities_metric = na_if(quantities_metric, 0)) %>%
drop_na() %>%
### On crée une dummy variable best_unit_metric qui pour chaque transaction vaut 1
### si la transacton est dans l'unité métrique la plus utilisée pour le produit
group_by(product_simplification_ville) %>%
mutate(best_unit_metric = names(which.max(table(quantity_unit_metric)))) %>%
ungroup() %>%
as.data.frame() %>%
mutate(best_unit_metric = best_unit_metric == quantity_unit_metric )
### Correction indice Ag
if (Correction_indice_Ag) {
### Chargement de la base de données de la valeur de l'argent
Ag_value <- read.csv2("./scripts/Edouard/Silver_price/Silver_equivalent_of_the_lt_and_franc_(Hoffman).csv")
### On fusionne les deux bases de données
bdd_courante <- merge(bdd_courante, Ag_value, "year" = "year", all.x = T)
### On corrige les valeurs des prix
bdd_courante <- bdd_courante %>%
mutate(value = value * Value_of_livre) %>%
select(-c("Value_of_livre"))
}
### Calcule de la valeur totale du flux et du commerce initiale
Value_com_tot <- bdd_courante %>%
filter(best_guess_region_prodxpart == 1, year >= 1718) %>%
filter(export_import == Exports_imports) %>%
group_by(year) %>%
summarize(Value_tot = sum(value, na.rm = T),
Flux_tot = n()) %>%
as.data.frame()
### Calcule la valeur totale du commerce au niveau national
Value_com_tot_nat <- bdd_courante %>%
filter(best_guess_national_partner == 1, year >= 1718) %>%
filter(export_import == Exports_imports) %>%
group_by(year) %>%
summarize(Value_tot_national = sum(value, na.rm = T)) %>%
as.data.frame()
Value_com_tot <- merge(Value_com_tot, Value_com_tot_nat, "year" = "year", all.x = T)
### Correction indice Ag
if (Correction_indice_Ag) {
### Chargement de la base de données de la valeur de l'argent
Ag_value <- read.csv2("./scripts/Edouard/Silver_price/Silver_equivalent_of_the_lt_and_franc_(Hoffman).csv")
### On fusionne les deux bases de données
Data <- merge(Data, Ag_value, "year" = "year", all.x = T)
### On corrige les valeurs des prix
Data <- Data %>%
mutate(unit_price_metric = unit_price_metric * Value_of_livre,
value = value * Value_of_livre) %>%
select(-c("Value_of_livre"))
}
if(Product_sector != "All") {
Data <- Data %>%
filter(product_threesectors == Product_sector)
}
if (Partner == "Europe_et_Mediterranee") {
Data <- Data %>%
filter(partner_grouping %in% c("Allemagne", "Angleterre", "Espagne",
"Flandre et autres états de l'Empereur",
"Hollande", "France", "Italie", "Levant et Barbarie",
"Nord", "Portugal", "Suisse"))
}
if (Partner == "Reste_du_monde") {
Data <- Data %>%
filter(partner_grouping %in% c("Afrique", "Amériques", "Asie", "Etats-Unis d'Amérique",
"Monde", "Outre-mers"))
}
### On conserve uniquement les données dans la meilleure unité
Data <- Data %>%
filter(best_unit_metric == T
& export_import == Exports_imports) %>%
select(-c("best_unit_metric", "best_guess_region_prodxpart", "product_simplification",
"product_threesectors", "product_threesectorsM", "partner_grouping"))
return(list(Data, Value_com_tot))
}
Add_new_partner_global("Reste_du_monde")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Imports"))
summary(Reg_trend_partner_global)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Exports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
table(Index_partner_global$Partner)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Exports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Exports"))
summary(Reg_trend_partner_global)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Reg_trend_partner_global <- lm(log(Index_value) ~ year + Partner + Partner*year ,
data = subset(Index_partner_global, Exports_imports == "Imports"))
summary(Reg_trend_partner_global)
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner == "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
Index_partner_global <- read.csv2("./scripts/Edouard/Partner_index_results_global.csv", row.names = NULL)
Index_partner_global <- Index_partner_global %>%
mutate_if(is.character, as.factor) %>%
filter(Exports_imports == "Imports", Partner != "All")
plot(Index_partner_global$year, Index_partner_global$Index_value, type = "o")
